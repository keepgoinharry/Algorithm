#include <bits/stdc++.h>
using namespace std;



vector<vector<int>> graph(101,vector<int>(101,99));

int N,M;
int dx[4] = {0,0,-1,1};
int dy[4] = {1,-1,0,0};


void bfs(vector<vector<int>>& visited, vector<vector<int>>& cnt)
{
  queue<pair<int,int>> q;
  q.push({0,0});
  visited[0][0] = true;
  while(!q.empty())
    {
      int cx = q.front().first;
      int cy = q.front().second;

      q.pop();

      for(int i=0; i<4; i++)
        {
          int nx = cx + dx[i];
          int ny = cy + dy[i];
          if(nx>=N||ny>=M||nx<0||ny<0)continue;
          if(graph[nx][ny]==0)
          {
            if(!visited[nx][ny])
            {
              visited[nx][ny] = true;
              q.push({nx,ny});
            }
          }
          else if (graph[nx][ny] == 1)cnt[nx][ny]++;
        }
    }
}

int nok(vector<vector<int>> cnt)
{
  int num = 0;
  for(int i=0; i<N; i++)
    {
      for(int j=0; j<M; j++)
        {
          if(cnt[i][j]>=2)
          {
            graph[i][j]=0;
            num++;
          }
        }
    }

  return num;
}
void print(vector<vector<int>> v)
{
  for(int i=0; i<N; i++)
    {
      for(int j=0; j<M; j++)
        {
          cout<<v[i][j];
        }
      cout<<endl;
    }

  cout<<endl;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  
  cin>>N>>M;
  
  for(int i=0; i<N; i++)
    {
      for(int j=0; j<M; j++)
        {
          cin>>graph[i][j];
        }
    }

  int answer = 0;
  while(true)
    {
      vector<vector<int>> visited(101,vector<int>(101,0));
      vector<vector<int>> cnt(101,vector<int>(101,0));
      bfs(visited,cnt);
      int num = nok(cnt);
      if(num)
      {
        answer++;
      }
      else break;
    }
  cout<<answer;
}
