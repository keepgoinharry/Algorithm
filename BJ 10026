#include <bits/stdc++.h>
using namespace std;
using ll = long long;

int dx[4] = {1,-1,0,0};
int dy[4] = {0,0,1,-1};
int N;
void bfs(int x, int y, vector<vector<bool>>& visited,  vector<vector<char>>& graph){
  queue<pair<int,int>> q;
  char cur = graph[x][y];
  visited[x][y]=true;
  q.push({x,y});
  while(!q.empty())
    {
      int cx = q.front().first;
      int cy = q.front().second;
      q.pop();
      for(int i=0; i<4; i++)
        {
          int nx = cx + dx[i];
          int ny = cy + dy[i];
          if(nx>=N||ny>=N||nx<0||ny<0)continue;
          if(graph[nx][ny]==cur&&!visited[nx][ny])
          {
            //cout<<cur<<" "<<graph[nx][ny]<<endl;
            visited[nx][ny] = true;
            q.push({nx,ny});
          }

        }
    }
  
}

int main(int argc, char* argv[]) {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  
  cin>>N;
  vector<vector<char>> graph1(N,vector<char>(N));
  vector<vector<char>> graph2(N,vector<char>(N));
  vector<vector<bool>> visited(N,vector<bool>(N,0));
  vector<vector<bool>> visited1(N,vector<bool>(N,0));
  for(int i=0; i<N; i++)
  {  
    string s;
    cin>>s;
    for(int j=0; j<s.size(); j++)
    {
      graph1[i][j] = s[j];
      graph2[i][j] = s[j];
      if(s[j] == 'G') graph2[i][j] = 'R';        
    }
  }

  int cnt1 = 0;
  int cnt2 = 0;
  for(int i=0; i<N; i++)
    {
      for(int j=0; j<N; j++)
        {
          if(!visited[i][j])
          {
            bfs(i,j,visited,graph1);
            cnt1++;
          }
        }
    }

  for(int i=0; i<N; i++)
    {
      for(int j=0; j<N; j++)
        {
          if(!visited1[i][j])
          {
            bfs(i,j,visited1,graph2);
            cnt2++;
          }
        }
    }
  cout<<cnt1<<" "<<cnt2;
  
  
}
