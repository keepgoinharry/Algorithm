#include <bits/stdc++.h>
using namespace std;
using ll = long long;

int getD(int num)
{
  num*=2;
  if(num>9999)num%=10000;
  return num;
}

int getS(int num)
{
  if(num==0)return 9999;
  else return num - 1;
}
int getL(int num)
{
  int plus = num/1000;
  num%=1000;
  num*=10;
  num+=plus;
  return num;
}
int getR(int num)
{
  int plus = num%10;
  plus*=1000;
  num/=10;
  num+=plus;
  return num;
}


int main(int argc, char* argv[]) {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  int T;
  cin>>T;
  //cout<<getR(0001)<<" "<<getL(0001);
  for(int i=0; i<T; i++)
    {
      int a,b;
      cin>>a>>b;
      vector<bool> visited(10000);
      vector<string> path(10000, "");
      queue<int> q;
      q.push(a);
      visited[a] = true;
      while(!q.empty())
        {
          int cur = q.front();
          q.pop();

          if(cur==b){
            cout<<path[cur]<<"\n";
            break;
          }
          int nx = getD(cur);
          if(!visited[nx])
          {
            visited[nx]=true;
            path[nx] = path[cur] + "D";
            q.push(nx);
          }
          nx = getS(cur);
          if(!visited[nx])
            {
              visited[nx]=true;
              path[nx] = path[cur] + "S";
              q.push(nx);
            }
          nx = getR(cur);
          if(!visited[nx])
            {
              visited[nx]=true;
              path[nx] = path[cur] + "R";
              q.push(nx);
            }
          nx = getL(cur);
          if(!visited[nx])
            {
              visited[nx]=true;
              path[nx] = path[cur] + "L";
              q.push(nx);
            }    
        }   
    } 
}
