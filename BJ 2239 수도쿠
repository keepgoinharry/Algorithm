#include <bits/stdc++.h>

using namespace std;
using ll = long long;
using pi=pair<int,int>;

vector<vector<bool>> row(9,vector<bool>(10,0));
vector<vector<bool>> col(9,vector<bool>(10,0));
vector<vector<bool>> box(9,vector<bool>(10,0));
vector<vector<int>> graph(9,vector<int>(9,0));
vector<pi> blanks;


void print()
{
  for(int i=0; i<graph.size(); i++)
    {
      for(int j=0; j<graph[i].size(); j++)
        {
          cout<<graph[i][j];
        }
      cout<<endl;
    }
}
void dfs(int idx)
{
  if(idx==blanks.size())
  {
    print();
    exit(0);
  }

  int x = blanks[idx].first;
  int y = blanks[idx].second;

  for(int num=1; num<=9; num++)
    {
      if(!row[x][num]&&!col[y][num]&&!box[(x/3)*3+(y/3)][num])
      {
        row[x][num] = col[y][num] = box[(x/3)*3+(y/3)][num] = true;
        graph[x][y] = num;
        dfs(idx+1);
        row[x][num] = col[y][num] = box[(x/3)*3+(y/3)][num] = false;
        graph[x][y] = 0;
      }
    }
  
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  for(int i=0; i<9; i++)
    {
      string s;
      cin>>s;
      for(int j=0; j<s.size(); j++)
        {
          graph[i][j] = s[j]-'0';
          int num = graph[i][j];
          if(num!=0)
          {
            row[i][num] = true;
            col[j][num] = true;
            int boxidx = (i/3)*3 + (j/3);
            box[boxidx][num] = true;
            
          }
          else blanks.push_back({i,j});
        }
    }

  //for(int i=0; i<blanks.size(); i++)
    {
      dfs(0);
    }
}
