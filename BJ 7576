#include <bits/stdc++.h>
using namespace std;
using ll = long long;

int dx[4] = {1,-1,0,0};
int dy[4] = {0,0,1,-1};

int main(int argc, char* argv[]) {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  int M,N;
  cin>>M>>N;
  vector<vector<int>> graph(N,vector<int>(M,0));

  queue<pair<int,int>> q;
    for(int i=0; i<N; i++)
      {  
         for(int j=0; j<M; j++)
           {
             cin>>graph[i][j];
             if(graph[i][j]==1)
             {
               q.push({i,j});
             }
           }
      }
  
  while(!q.empty())
    {
      int cx = q.front().first;
      int cy = q.front().second;
      q.pop();
      for(int i=0; i<4; i++)
        {
          int nx = cx + dx[i];
          int ny = cy + dy[i];
          if(nx>=N||ny>=M||nx<0||ny<0)continue;
          if(graph[nx][ny]==0)
          {
            graph[nx][ny] = graph[cx][cy] + 1;
            q.push({nx,ny});
          }
            
        }
    }

  int ans = 0;
      for(int n=0; n<N; n++) {
          for(int m=0; m<M; m++) {
              if(graph[n][m] == 0) {
                  cout << -1;
                  return 0;
              }
              ans = max(ans, graph[n][m]);
          }
      }
  cout << ans-1;
  
  
}
