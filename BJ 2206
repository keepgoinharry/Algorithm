#include <bits/stdc++.h>
using namespace std;
int dist[1001][1001][2];
int graph[1001][1001];
int N,M;
int dx[4] = {0,0,-1,1};
int dy[4] = {1,-1,0,0};
int bfs()
{
  queue<tuple<int,int,int>> q;
  q.push({0,0,0});
  dist[0][0][0] = 1;
  while(!q.empty())
    {
      int cx = get<0>(q.front());
      int cy = get<1>(q.front());
      int wall = get<2>(q.front());
      q.pop();
      for(int i=0; i<4; i++)
        {
          int nx = dx[i] + cx;
          int ny = dy[i] + cy;
          if(nx>=N||ny>=M||nx<0||ny<0)continue;
          if(graph[nx][ny] == 0 && dist[nx][ny][wall]==0)
          {
            dist[nx][ny][wall] = dist[cx][cy][wall] + 1;
            q.push({nx,ny,wall});
          }

          if(graph[nx][ny] == 1 && wall ==0 && dist[nx][ny][1]==0)
            {
              dist[nx][ny][1] = dist[cx][cy][wall] + 1;
              q.push({nx,ny,1});
            }
        }
    }
  if(dist[N-1][M-1][0] && dist[N-1][M-1][1])
    return min(dist[N-1][M-1][0], dist[N-1][M-1][1]);
  else if(dist[N-1][M-1][0])
    return dist[N-1][M-1][0];
  else if(dist[N-1][M-1][1])
    return dist[N-1][M-1][1];
  else
    return -1;
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  
  cin>>N>>M;
  
  for(int i=0; i<N; i++)
    {
      string s;
      cin >> s;
      for(int j=0; j<M; j++)
        graph[i][j] = s[j] - '0';
    }

  cout<<bfs();
}
