#include <string>
#include <vector>
#include <bits/stdc++.h>

using namespace std;

int solution(int n, vector<vector<int>> edge) {
    int answer = 0;
    queue<pair<int,int>> q;
    vector<vector<int>> graph(n+1);
    for(int i=0; i<edge.size(); i++)
    {
        int u = edge[i][0];
        int v = edge[i][1];
        graph[u].push_back(v);
        graph[v].push_back(u);
    }
    vector<int> dist(n+1);
    vector<bool> visited(n+1);
    q.push({1,0});
    visited[1] = true;
    while(!q.empty())
    {
        int cx = q.front().first;
        int cd = q.front().second;
        q.pop();
        if(!dist[cx])dist[cx] = cd;
        
        for(int i=0; i<graph[cx].size(); i++)
        {
            int nx = graph[cx][i];
            if(!dist[nx]&&!visited[nx])
            {
                visited[nx] = true;
                q.push({nx,cd+1});
            }
        }
        
    }
    int mx = *max_element(dist.begin(),dist.end());
    //cout<<mx<<endl;
    for(int i=1; i<dist.size(); i++)
    {
        //cout<<dist[i]<<" ";
        if(dist[i]==mx)answer++;
    }
    return answer;
}
